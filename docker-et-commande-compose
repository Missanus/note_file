


docker-compose: 
(orchestrateur)
Un orchestrateur est un outil permettant d'actionner, de coordonner et de monitorer des artefacts.
Docker-compose est un orchestrateur de Docker. Il vous permet de manipuler un ensemble de conteneurs pour former un service.
Docker-compose est un outil téléchargeable qui s'ajoute à votre docker démon. Ils sont complémentaires 
fiel docker-compose.yml
pour gérer plusieurs conteneurs docker

---------------deocker compose ------------------
nginx
version: '3' # la version de docker utilisé 
web:  # service qui s'appelle web 
image: nginx:latest
ports:
  8080:80   # il mape le port 8080 de votre hot avec le port 80 de votre docker ( host docker )
vomumes:
   - ./code:/code  # puis il monde les volume dans docker
   -  ./site.conf:/etc/nginx/conf.d/site.conf
   
create link: 
************
Docker-compose est un outil téléchargeable qui s'ajoute à votre docker démon. Ils sont complémentaires

web:
 ----------------
 + 
 links
   - php  # service php en dessous 
php:
 image: php:7-fpm
 volumes:
  - ./code:/code  # il se base sur e volume code de nginx 
 
 ------------------  TP ----------------
 Time-to-shine

Objectif : Créez votre premier docker-compose pour une application php simple

    Connectez-vous à Play With Docker

slide 10  ........up -d 
------------------------
    Créez un fichier nommé docker-compose.yml $ vim docker-compose.yml
    Dans ce fichier, créez un conteneur php et nginx
    Démarrez le docker-compose $ docker-compose up
    Vérifiez que la page d'accueil nginx s'affiche $ curl http://localhost:80
    Eteignez les docker $ docker-compose down

----------------------------------------------------------
https://stackoverflow.com/questions/29905953/how-to-correctly-link-php-fpm-and-nginx-docker-containers
server {
    listen  80;

    # this path MUST be exactly as docker-compose.fpm.volumes,
    # even if it doesn't exist in this dock.
    root /complex/path/to/files;

    location / {
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/.+\.php(/|$) {
        fastcgi_pass fpm:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}
-------------------------- moi ----------------
 version: '3'
 services:
   web:
       image: nginx:latest
       ports:
           - "8080:80"
       volumes:
           - ./code:/code
           - ./site.conf:/etc/nginx/conf.d ( je dirais que c'est pas bon ) 
       links:
              - php
  
      php:
          image: php:fpm
          volumes:
		  - ./code:/code
	  db:
	     image: postgres
	     networks:
		   - backend
networks:
  backend
  
volumes:
  code:./code  # il sera patager entre php et web 
  Le conteneur "php" et "db" peuvent comuniquer grâce aux hostnames "web" et "db". Par exemple http://db:8001 pour accéder à la base de donnée depuis le conteneur php	
Option:
restart always; si dockers crash il se redemarrer automatiquement
deponds_on : generer une notion de dependance entre les services
link: Advertisements. Container Linking allows multiple containers to link with each other. It is a better option than exposing ports.
allows you to link multiple containers together and send connection information from one to another.
$ docker-compose up -d

$ docker-compose ps
   Name                  Command               State    Ports
-------------------------------------------------------------
datas_php_1   docker-php-entrypoint php-fpm    Exit 0        
datas_web_1   /docker-entrypoint.sh ngin ...   Exit 1  
------------------------------------------------
 130  docker pull nginx
  131  docker images
  132  docker run -d nginx 
  133  docker exec -t 22
  134  docker exec -it 22b /bin/bash
  135  history
  ------------------------------------------------
Network:
********
Il est possible de créer un réseau de conteneur grâce au mot-clé networks dans le cas de topologies plus complexes.
network: bakend : por ne pas ouvrir les post de nos contenaur , seul les conteneurs peuvent se communiquer entre eux ( sauf ceux qui sont mapper comme 8080:80) 
db:
   image: postgres
   networks:
     - backend
networks:
  backend
-------------------------------------------------
docker run -d \
  --name mycontainer1 \
  -v vol1:/app \
  nginx:latest
----------------------------------------------------  
volume create : jenkins:
************************
https://hub.docker.com/_/jenkins/
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins
docker ps -a
docker rm 
$ docker volume rm myvol1

build:
******
docker build -t simple-devops-image:latest .


Container or conteneur:
***********************
docker rm containerID or Name

tag:
****
docker tag  mon image:latest  nassim/monimage:latest80    (par expm)


login:
******
docker login -u "username" -p "password"  docker.io

push:
*****
docker push (dockernassimchet/ <<-- obligatoire --name_image_tag_with_tag
---------------------------------------------------------


$ cat index.html 
<!doctype html>
<html lang="fr">   
<head>
</head>
<body>
  <h1> contenur 2, hello world forner One,  all over peron in thz world. </h1>
</body>
</html>

$ cat about.html 
contenur 2, hello from the file about.html

--------------------------------------------
$ cat Dockerfile 
FROM nginx:latest

COPY ./index1.html /usr/share/nginx/html
COPY ./about1.html /usr/share/nginx/html


EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

---------------------------------------

alias:
******

$ alias kubectl='winpty kubectl'
---------------------------------------

ENTRYPOINT:
COPY nginx.conf /etc/nginx/nginx.conf
COPY startup.sh .
RUN chmod 777 startup.sh
ENTRYPOINT ./startup.sh

-------------
IP adress conainer :

docker inspect CONTAINER_ID | grep "IPAddress"
Si vous ajoutez -i à grep, la casse IPAddress peut ressembler à ceci:
docker inspect CONTAINER_ID | grep -i "IPADDress"

